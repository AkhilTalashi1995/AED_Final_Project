/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package FrontEnd.Customer;

import Backend.Customers.Customer;
import Backend.EcoSystem;
import Backend.Employee.Employee;
import Backend.Role.RoleCustomer;
import Backend.User.User;
//import Model.Utils.CryptoSupport;
import Backend.Utils.Validation;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import static java.lang.Boolean.TRUE;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;

/**
 *
 * @author Aashay
 */
public class CustomerRegisterWorkAreaJPanel extends javax.swing.JPanel {

    
    private JPanel userProcessContainer;
    private User userAccount;
    private EcoSystem system;
    private static final String secretKey = "9F2H65BYTJ";
    
    public CustomerRegisterWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        populateCombo();
        
    }
    private void populateCombo() {
        genderComboBox.removeAllItems();
        for (Customer.Gender type : Customer.Gender.values()) {
            genderComboBox.addItem(type);
        }
    }
    
    
    private void getValuesFromTextField(Customer customer) {
        if (userNameTextField.getText().isEmpty() || firstNameTextField.getText().isEmpty() || ageTextField.getText().isEmpty()
                || emailTextField.getText().isEmpty() || mobileNumberTextField.getText().isEmpty()
                || cityTextState.getText().isEmpty() || passwordTextField.getText().isEmpty()
                || reenterPasswordTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter all the fields");
        } else {
            try {
                if (Validation.validateNameAndNumber(userNameTextField.getText())) {
                    customer.setUserName(userNameTextField.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "User name should have only aphabets and numbers");
                }
                if (Validation.validateFirstName(firstNameTextField.getText())) {
                    customer.setFirstName(firstNameTextField.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "First name should only contain alphabets");
                }
                if (Validation.validateFirstName(lastNameTextField.getText())) {
                    customer.setLastName(lastNameTextField.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "Last name should only contain alphabets");
                }
                customer.setAge(Integer.parseInt(ageTextField.getText()));
                if (Validation.validateEmail(emailTextField.getText())) {
                    customer.setEmail(emailTextField.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "Email should contain a valid email");
                }
                customer.setCreateDate(new Date());
                if (Validation.validateMobnumber(mobileNumberTextField.getText())) {
                    customer.setMobileNumber(mobileNumberTextField.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "Please enter valid mobile number");
                }
                //customer.setMobileNumber(CryptoSupport.encrypt(mobileNumberTextField.getText(), secretKey));

                if (Validation.validateFirstName(cityTextState.getText())) {
                    customer.setCity(cityTextState.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "City should only contain alphabets");
                }
                customer.setPassword(passwordTextField.getText());
                customer.setReenterPassword(reenterPasswordTextField.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Input not valid");
                return;
            }
            //JOptionPane.showMessageDialog(this, "User created successfully.");
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        ageTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        genderComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        mobileNumberTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cityTextState = new javax.swing.JTextField();
        registerBtn1 = new javax.swing.JButton();
        registerBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        reenterPasswordTextField = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));
        setPreferredSize(new java.awt.Dimension(1800, 1800));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Username");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 250, -1, -1));

        userNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameTextFieldActionPerformed(evt);
            }
        });
        add(userNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 250, 200, -1));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Password");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 300, 110, -1));

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Re-Enter Password");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 350, -1, -1));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("First Name");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, -1, -1));
        add(firstNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 150, 180, -1));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Last Name");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 200, -1, -1));
        add(lastNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 200, 180, -1));

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Age");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 350, -1, -1));
        add(ageTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 350, 180, -1));

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Gender");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 150, -1, -1));

        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(genderComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 150, 200, -1));

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Email");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 250, -1, -1));
        add(emailTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 250, 180, -1));

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Mobile Number");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, -1, -1));
        add(mobileNumberTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 300, 180, -1));

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("City");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 200, 45, -1));
        add(cityTextState, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 200, 200, -1));

        registerBtn1.setBackground(new java.awt.Color(0, 102, 102));
        registerBtn1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        registerBtn1.setForeground(new java.awt.Color(255, 255, 255));
        registerBtn1.setText("Back");
        registerBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtn1ActionPerformed(evt);
            }
        });
        add(registerBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 90, 30));

        registerBtn.setBackground(new java.awt.Color(0, 153, 153));
        registerBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        registerBtn.setForeground(new java.awt.Color(255, 255, 255));
        registerBtn.setText("Register");
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });
        add(registerBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 420, 110, 30));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Customer Registration");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, 330, 50));

        passwordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTextFieldActionPerformed(evt);
            }
        });
        add(passwordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 300, 200, -1));
        add(reenterPasswordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 350, 200, -1));

        jLabel12.setBackground(new java.awt.Color(0, 153, 204));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/logo-transparent-png (1).png"))); // NOI18N
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 530, 420, 190));
    }// </editor-fold>//GEN-END:initComponents

    private void userNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameTextFieldActionPerformed

    private void registerBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtn1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerWorkAreaJPanel dwjp = (CustomerWorkAreaJPanel) component;
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_registerBtn1ActionPerformed

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
        // TODO add your handling code here:
        String error = "";
        if((firstNameTextField.getText().equalsIgnoreCase("")) ||
            (mobileNumberTextField.getText().equalsIgnoreCase(""))||
            (lastNameTextField.getText().equalsIgnoreCase("")) ||
                (ageTextField.getText().equalsIgnoreCase("")) ||
                (emailTextField.getText().equalsIgnoreCase("")) ||
                (cityTextState.getText().equalsIgnoreCase("")) ||
                (userNameTextField.getText().equalsIgnoreCase(""))||
                (passwordTextField.getText().equalsIgnoreCase(""))||
                (reenterPasswordTextField.getText().equalsIgnoreCase(""))){
            error="\nAll the fields are Mandatory!!!";
            //Highligting the unfilled blocks to RED
            if((firstNameTextField.getText().equalsIgnoreCase(""))){
                firstNameTextField.setBorder(new LineBorder(Color.RED,2));
            }
            if((lastNameTextField.getText().equalsIgnoreCase(""))){
                lastNameTextField.setBorder(new LineBorder(Color.RED,2));
            }
            if((mobileNumberTextField.getText().equalsIgnoreCase(""))){
                mobileNumberTextField.setBorder(new LineBorder(Color.RED,2));
            }
            if((ageTextField.getText().equalsIgnoreCase(""))){
                ageTextField.setBorder(new LineBorder(Color.RED,2));
            }
            if((emailTextField.getText().equalsIgnoreCase(""))){
                emailTextField.setBorder(new LineBorder(Color.RED,2));  
            }
            if((cityTextState.getText().equalsIgnoreCase(""))){
                cityTextState.setBorder(new LineBorder(Color.RED,2));
                
            }
             if((userNameTextField.getText().equalsIgnoreCase(""))){
                userNameTextField.setBorder(new LineBorder(Color.RED,2));
                
            }
            if((passwordTextField.getText().equalsIgnoreCase(""))){
                passwordTextField.setBorder(new LineBorder(Color.RED,2));
                
            }
            if((reenterPasswordTextField.getText().equalsIgnoreCase(""))){
                reenterPasswordTextField.setBorder(new LineBorder(Color.RED,2));
                
            }
        }
        
        if(!error.equals("")){
            JOptionPane.showMessageDialog(null,error);
            return;
        }else{ 
             String pwdRegex = "((?=.*[a-z])(?=.*)(?=.*[@$*#&])(?=.*[A-Z]).{6})";
             Pattern pwdPattern = Pattern.compile(pwdRegex);
             Matcher pwdCheck = pwdPattern.matcher(passwordTextField.getText());
             boolean checkPwd = pwdCheck.matches();
                if(!(checkPwd == TRUE)){
                    error+="\n\n Password needs to match below criteria:\n"
                    + "Password must be 6 characters only.\nIt Must have atleast one upper character.\nIt must have atleast one lower character."
                            + "\nIt must have atleast one digit.\nIt must have atleast one special character[#$&*]. ";
            passwordTextField.setBorder(new LineBorder(Color.RED,2));
            }
            /*String pwdRegex1 = "((?=.*[a-z])(?=.*)(?=.*[@$*#&])(?=.*[A-Z]).{6})";
            Pattern pwdPattern1 = Pattern.compile(pwdRegex1);
            Matcher pwdCheck1 = pwdPattern1.matcher(reenterPasswordTextField.getText());
            boolean checkPwd1 = pwdCheck1.matches();
            if(!(checkPwd1 == TRUE)){
                error+="\n\n ReenterPassword needs to match below criteria:\n"
                    + "ReenterPassword must be 6 characters only.\nIt Must have atleast one upper character.\nIt must have atleast one lower character."
                            + "\nIt must have atleast one digit.\nIt must have atleast one special character[#$&*]. ";
                reenterPasswordTextField.setBorder(new LineBorder(Color.RED,2));
                }
            */
            String emailPattern = "^(.+)@(.+)$";
            Pattern emailPat = Pattern.compile(emailPattern);
            Matcher checkEmail = emailPat.matcher(emailTextField.getText());
            boolean emailMatch = checkEmail.matches();
            if(!(emailMatch == TRUE)){
                error+="\n\nPlease enter valid email address.";
                emailTextField.setBorder(new LineBorder(Color.RED,2));
                
            }
            
            
            String usernamePattern = "[0-9A-za-z]{8}";
            Pattern userPat = Pattern.compile(usernamePattern);
            Matcher checkUser = userPat.matcher(userNameTextField.getText());
            boolean userMatch = checkUser.matches();
            if(!(userMatch == TRUE)){
                error+="\n\nUsername needs to be 8 characters only-combination of characters and digits!";
                userNameTextField.setBorder(new LineBorder(Color.RED,2));
                
            }
            
            
            String userCheck = userNameTextField.getText();
            boolean check = system.getUserAccountDirectory().checkIfUsernameIsUnique(userCheck);
            if(check==false){error+="\nUsername needs to be unique!";
                userNameTextField.setBorder(new LineBorder(Color.RED,2));               
            }
            
            String firstnamePattern = "^[A-Za-z]+$";
            Pattern firstnamePat = Pattern.compile(firstnamePattern);
            Matcher checkfirstname = firstnamePat.matcher(firstNameTextField.getText());
            boolean firstnameMatch = checkfirstname.matches();
            if(!(firstnameMatch == TRUE)){
                error+="\nPlease enter valid First Name";
                firstNameTextField.setBorder(new LineBorder(Color.RED,2));
                
            }
            
            String lastnamePattern = "^[A-Za-z]+$";
            Pattern lastnamePat = Pattern.compile(lastnamePattern);
            Matcher checklastname = lastnamePat.matcher(lastNameTextField.getText());
            boolean lastnameMatch = checklastname.matches();
            if(!(lastnameMatch == TRUE)){
                error+="\nPlease enter valid Last Name";
                lastNameTextField.setBorder(new LineBorder(Color.RED,2));
                
            }
            String agePattern = "^100|[1-9]?\\d$";
            Pattern agePat = Pattern.compile(agePattern);
            Matcher checkage = agePat.matcher(ageTextField.getText());
            boolean ageMatch = checkage.matches();
            if(!(ageMatch == TRUE)){
                error+="\nPlease enter valid age";
                ageTextField.setBorder(new LineBorder(Color.RED,2));
                
            }
      
            
            String cityPattern = "^[A-Za-z]+$";
            Pattern cityPat = Pattern.compile(cityPattern);
            Matcher checkcity = cityPat.matcher(cityTextState.getText());
            boolean cityMatch = checkcity.matches();
            if(!(cityMatch == TRUE)){
                error+="\nPlease enter valid City Name";
                cityTextState.setBorder(new LineBorder(Color.RED,2));
                
            }
            
            String phoneRegex = "^\\d{10}$";
            Pattern phonePattern = Pattern.compile(phoneRegex);       
            Matcher checkPhone = phonePattern.matcher(mobileNumberTextField.getText());
            boolean checkPhoneMatch = checkPhone.matches();
            if(!(checkPhoneMatch == TRUE)){  
                error="\nFor Phone number - Please enter only 10 digits!";
                mobileNumberTextField.setBorder(new LineBorder(Color.RED,2));
            }

            
        }
            if(!error.equals("")){
            JOptionPane.showMessageDialog(null,error);
        }else{
                firstNameTextField.setBorder(new LineBorder(Color.WHITE,2));
                lastNameTextField.setBorder(new LineBorder(Color.WHITE,2));
                ageTextField.setBorder(new LineBorder(Color.WHITE,2));
                emailTextField.setBorder(new LineBorder(Color.WHITE,2));
                userNameTextField.setBorder(new LineBorder(Color.WHITE,2));
                mobileNumberTextField.setBorder(new LineBorder(Color.WHITE,2));
                cityTextState.setBorder(new LineBorder(Color.WHITE,2));
                passwordTextField.setBorder(new LineBorder(Color.WHITE,2));
                reenterPasswordTextField.setBorder(new LineBorder(Color.WHITE,2));

        
        RoleCustomer customerRole = new RoleCustomer();
        Customer customer = new Customer();
        //getValuesFromTextField(customer);
        customer.setFirstName(firstNameTextField.getText());
        customer.setLastName(lastNameTextField.getText());
        customer.setAge(Integer.parseInt(ageTextField.getText()));
        customer.setEmail(emailTextField.getText());
        customer.setUserName(userNameTextField.getText());
        customer.setMobileNumber(mobileNumberTextField.getText());
        customer.setCity(cityTextState.getText());
        customer.setPassword(passwordTextField.getText());
        customer.setReenterPassword(reenterPasswordTextField.getText());
        customerRole.setCustomer(customer);
    
        
        Employee employee = system.getEmployeeDirectory().createEmployee(customer.getFirstName(), customerRole);
            if(system.getUserAccountDirectory().checkIfUsernameIsUnique(customer.getUserName())) {
            User userAccount = system.getUserAccountDirectory().createUserAccount(customer.getUserName(), customer.getPassword(), employee, customerRole);
            //JOptionPane.showMessageDialog(this, "User created successfully.");
            }else {
            //JOptionPane.showMessageDialog(this, "Username already exists");
            error+="\nUsername needs to be unique!";
                userNameTextField.setBorder(new LineBorder(Color.RED,2));  
            }
            JOptionPane.showMessageDialog(this, "User created successfully.");
            firstNameTextField.setText("");
            lastNameTextField.setText("");
            ageTextField.setText("");
            emailTextField.setText("");
            userNameTextField.setText("");
            mobileNumberTextField.setText("");
            cityTextState.setText("");
            passwordTextField.setText("");
            reenterPasswordTextField.setText("");
            }
            
            
    }//GEN-LAST:event_registerBtnActionPerformed

    private void passwordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageTextField;
    private javax.swing.JTextField cityTextState;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JComboBox genderComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JTextField mobileNumberTextField;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JPasswordField reenterPasswordTextField;
    private javax.swing.JButton registerBtn;
    private javax.swing.JButton registerBtn1;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
}
